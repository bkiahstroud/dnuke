#!/usr/bin/env ruby

def matching_containers(arg)
  container_ids_raw = `docker ps -aqf name=#{arg}`
  container_ids = container_ids_raw.split(/\n/)
  matching_containers = Hash.new

  unless container_ids.empty?
    container_ids.each do |id|
      container_name = `docker ps -af id=#{id} --format "{{.Names}}"`.strip
      matching_containers[id] = container_name
    end
  end
  matching_containers
end

# TODO: make sure no matching containers are
#       running before attempting removal
def remove_containers(arg)
  containers = matching_containers(arg)
  puts "removing containers that match: #{arg}"
  unless containers.nil? || containers.empty?
    containers.each do |id, name|
      `docker container rm #{id}`
      if `docker ps -aqf id=#{id}`.length > 0
        puts ">>> there was an issue removing container #{name} (#{id})"
        puts "\n"
      else
        puts "\s\scontainer #{name} was removed"
      end
    end
  else
    puts "\s\sNO CONTAINERS REMOVED: no containers match #{arg}"
  end
end

def remove_volumes(arg)
  volumes = `docker volume ls` # String
  volumes = volumes.squeeze(' ').chop
  volumes = volumes.split(/\nlocal /) # Array
  volumes = volumes.map do |v|
    if v.match(arg)
      v
    end
  end
  volumes = volumes.compact # remove any lingering nil values
  puts "removing volumes that match: #{arg}"
  unless volumes.empty?
    volumes.map do |v|
      `docker volume rm #{v}`
      if `docker volume ls`.match(v)
        puts ">>> there was an issue removing volume #{v}"
        puts "\n"
      else
        puts "\s\svolume #{v} was removed"
      end
    end
  else
    puts "\s\sNO VOLUMES REMOVED: no volumes match #{arg}"
  end
end

unless ARGV.length == 0
  ARGV.each do |value|
    puts "\n"
    puts "I, the mighty " + File.basename(__FILE__) + ", was passed: " + value
    puts "\n"
    remove_containers(value)
    puts "\n"
    remove_volumes(value)
    puts "\n--------------------------------------------------------------------"
  end
else
  puts "Please pass an argument"
end
